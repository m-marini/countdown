{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["moment","locale","TargetDate","ISO_8601","Counter","date","duration","diff","Badge","variant","pill","format","years","months","days","App","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Container","Jumbotron","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTASAA,IAAOC,OAAO,MAEd,IAAMC,EAAaF,IAAO,4BAA6BA,IAAOG,UAExDC,EAEA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACDC,EAAWN,IAAOM,SAASD,EAAKE,KAAKP,QAE3C,OACE,6BACE,4BACE,kBAACQ,EAAA,EAAD,CAAOC,QAAQ,UAAUC,MAAI,GAC1BL,EAAKM,OAAO,OAFjB,MAGa,kBAACH,EAAA,EAAD,CAAOC,QAAQ,UAAUC,MAAI,GACrCJ,EAASM,QADD,UACiBN,EAASO,SAD1B,UAC2CP,EAASQ,OADpD,cAQNC,EAA6B,WACxC,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOR,QAAQ,OAAOS,OAAO,MACtC,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,0BAAnB,mBACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,KAAf,aAhCI,YAoCV,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWH,UAAU,eACnB,mDACA,kBAAC,EAAD,CAASrB,KAAMH,QClCL4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef2172d8.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport './App.css';\nimport { Navbar, Container, Jumbotron, Badge, Nav } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport moment, { Moment } from 'moment';\nimport 'moment/locale/it';\n\nconst Version = \"1.0.2\";\n\nmoment.locale('it');\n\nconst TargetDate = moment('2022-02-01T00:00:00+01:00', moment.ISO_8601);\n\nconst Counter: FunctionComponent<Readonly<{\n  date: Moment;\n}>> = ({ date }) => {\n  const duration = moment.duration(date.diff(moment()));\n\n  return (\n    <div>\n      <h1>\n        <Badge variant=\"primary\" pill>\n          {date.format('LL')}\n        </Badge> - <Badge variant=\"primary\" pill>\n          {duration.years()} anno, {duration.months()} mesi, {duration.days()} giorni\n        </Badge>\n      </h1>\n    </div>\n  );\n}\n\nexport const App: FunctionComponent<{}> = () => {\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Navbar.Brand href=\"http://www.mmarini.org\">www.mmarini.org</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#\">Countdown {Version}</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Container>\n        <Jumbotron className=\"text-center\">\n          <h1>Conto alla rovescia</h1>\n          <Counter date={TargetDate}></Counter>\n        </Jumbotron>\n      </Container>\n    </div >\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}